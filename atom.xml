<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Matt Snider]]></title>
  <link href="http://msnider.github.io/atom.xml" rel="self"/>
  <link href="http://msnider.github.io/"/>
  <updated>2014-01-08T14:07:00-05:00</updated>
  <id>http://msnider.github.io/</id>
  <author>
    <name><![CDATA[Matt Snider]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Naked Domain Redirects Made Easy]]></title>
    <link href="http://msnider.github.io/blog/2014/01/08/naked-domain-redirects-made-easy/"/>
    <updated>2014-01-08T13:54:56-05:00</updated>
    <id>http://msnider.github.io/blog/2014/01/08/naked-domain-redirects-made-easy</id>
    <content type="html"><![CDATA[<p>If you build a lot of websites you will soon discover how annoying workin with
<a href="http://en.wikipedia.org/wiki/A_record#A">A-Records</a> can be. They point directly
at an IP-Address, which unless its a load balancer is almost never what you
want. Since I frequently work in cloud-based environments, IP Addresses often
change when I want a new version of a server and this means the A-Record would
no longer work.</p>

<p>Instead, I prefer to work with DNS and redirect based on <a href="http://en.wikipedia.org/wiki/CNAME_record">CNAMEs</a>,
but this is impossible with the Apex/Root/Naked Domain. See Heroku&rsquo;s article on
<a href="https://devcenter.heroku.com/articles/apex-domains">The Limitations of DNS A-Records</a>.</p>

<p>To handle this problem, I&rsquo;ve been using an excellent and free service called
<a href="http://wwwizer.com/naked-domain-redirect">WWWizer.com</a>. They provide a free
redirect from your naked domain to the WWW subdomain which you can then CNAME as
needed.</p>

<p>All you have to do is point your naked domain&rsquo;s A-Record to 174.129.25.170.</p>

<p>You could of course run this service yourself, but it&rsquo;s nice to not have to run
yet another server.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VisualVM on a Remote EC2 instance over an SSH Tunnel]]></title>
    <link href="http://msnider.github.io/blog/2014/01/07/visualvm-on-a-remote-ec2-instance-over-an-ssh-tunnel/"/>
    <updated>2014-01-07T14:04:44-05:00</updated>
    <id>http://msnider.github.io/blog/2014/01/07/visualvm-on-a-remote-ec2-instance-over-an-ssh-tunnel</id>
    <content type="html"><![CDATA[<p>Getting <a href="https://visualvm.java.net/">VisualVM</a> to work remotely can be difficult
so I&rsquo;ve decided to record the steps that I use to connect to an Amazon EC2
instance.</p>

<p>I&rsquo;ll prefix each step with which machine it should be run on. To be clear, we
are running VisualVM on our local machine and trying to profile a JVM on a remote
machine.</p>

<p>The steps are as follows:</p>

<h3><strong>LOCAL:</strong> Setup an SSH Tunnel to the remote machine on port 10000.</h3>

<p>If you&rsquo;re using the <code>ssh</code> command (linux or Mac) this would be done using
dynamic port forwarding:</p>

<pre><code>ssh -D 10000 ec2-user@[ec2 ip or cname]
</code></pre>

<p>If you&rsquo;re on Windows, then you are probably using Putty, so the tunnel would be
setup just like a regular SSH connection but add a Dynamic Forwarded Port under
Connection &ndash;> SSH &ndash;> Tunnels.
<img src="http://msnider.github.io/images/putty-setup-dynamic-port-forwarding.png"></p>

<p>Leave this tunnel open while you monitor the JVM.</p>

<h3><strong>REMOTE:</strong> Enable JMX on the remote JVM</h3>

<p>Add the following parameters to the JVM:</p>

<pre><code>-Dcom.sun.management.jmxremote.port=9000
-Dcom.sun.management.jmxremote.ssl=false
-Dcom.sun.management.jmxremote.authenticate=false
</code></pre>

<h3><strong>REMOTE:</strong> Create a jstatd permissions file</h3>

<p>Create a file named <code>permissions.txt</code> with the following contents:</p>

<pre><code>grant {
  permission java.security.AllPermission;
};
</code></pre>

<h3><strong>REMOTE:</strong> Start jstatd</h3>

<p>Run <code>jstatd -J-Djava.security.policy=permissions.txt</code>. Leave this running while
you monitor the JVM.</p>

<h3><strong>LOCAL:</strong> Open VisualVM</h3>

<h3><strong>LOCAL:</strong> Enable VisualVM to use the SSH tunnel</h3>

<ol>
<li>In VisualVM, open menu: Tools &ndash;> Options &ndash;> Network</li>
<li>Select <code>Manual proxy settings</code></li>
<li>Uncheck <code>Use the same proxy settings for all protocols</code></li>
<li>Set SOCKS Proxy:  <code>localhost</code>, Port: <code>10,000</code></li>
</ol>


<h3><strong>REMOTE:</strong> Get the IP Address of the server</h3>

<p>On Linux run <code>ifconfig</code> and generally you are looking for the ip address after
<code>inet addr</code> on <code>eth0</code> but it may vary.</p>

<p>On Windows run <code>ipconfig</code> and you are looking for the <code>IPv4 Address</code></p>

<h3><strong>LOCAL:</strong> Add the Remote Host to VisualVM</h3>

<ol>
<li>In VisualVM, open menu: File &ndash;> Add Remote Host</li>
<li>Add the IP Address from the previous step</li>
<li>Under Advanced Settings, remove the default jstatd connection</li>
<li>Click OK</li>
<li>Right-Click the new host and select &ldquo;Add JMX Connection&hellip;&rdquo;</li>
<li>Enter the IP Address from the previous step with port 9000 as the connection. This should look like: 10.0.0.1:9000.</li>
<li>Click OK</li>
<li>VisualVM should connect! You should now be able to monitor the remote JVM!</li>
</ol>


<h4>References</h4>

<ul>
<li><a href="http://pedanttinen.blogspot.com/2012/02/remote-visualvm-session-through-ssh.html">http://pedanttinen.blogspot.com/2012/02/remote-visualvm-session-through-ssh.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Force HTTPS/SSL on Amazon Elastic Beanstalk]]></title>
    <link href="http://msnider.github.io/blog/2013/12/06/force-https-slash-ssl-on-amazon-elastic-beanstalk/"/>
    <updated>2013-12-06T20:12:57-05:00</updated>
    <id>http://msnider.github.io/blog/2013/12/06/force-https-slash-ssl-on-amazon-elastic-beanstalk</id>
    <content type="html"><![CDATA[<p>1. Configure Elastic Beanstalk to allow both HTTP &amp; HTTPS. Make sure to set an
SSL Certicate. This will require a refresh of the Elastic Load Balancer.
<img src="http://msnider.github.io/images/aws-eb-https-configuration.png">
Now your application should be accessible by both HTTP and HTTPS.</p>

<p>2. Every Elastic Beanstalk application uses the Apache web server which can be
used to redirect non-SSL traffic to the HTTPS endpoint.
The easiest way to do this is to create a custom configuration file which
creates the re-write rules.</p>

<p>3. Create (if you don&rsquo;t already have) a &ldquo;.ebextensions&rdquo; directory in the root
of the deployed directory. So in PHP apps, this is the top level or in
Java apps this would be src/main/webapp</p>

<p>4. Create a Apache config file called &ldquo;elasticbeanstalk.conf&rdquo; in .ebextensions</p>

<p>5. I use the following rules in elasticbeanstalk.conf:</p>

<figure class='code'><figcaption><span>elasticbeanstalk.conf </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="nt">&lt;VirtualHost</span> <span class="s">*:80</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Proxy</span> <span class="s">*</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nb">Order</span> deny,allow
</span><span class='line'>    <span class="nb">Allow</span> from <span class="k">all</span>
</span><span class='line'>  <span class="nt">&lt;/Proxy&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">ProxyPass</span> / http://localhost:8080/ retry=0
</span><span class='line'>  <span class="nb">ProxyPassReverse</span> / http://localhost:8080/
</span><span class='line'>  <span class="nb">ProxyPreserveHost</span> <span class="k">on</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">RewriteEngine</span> <span class="k">On</span>
</span><span class='line'>  <span class="nb">RewriteCond</span> %{HTTP:X-Forwarded-Proto} !https
</span><span class='line'>  <span class="nb">RewriteRule</span> !/status https://%{SERVER_NAME}%{REQUEST_URI} [L,R]
</span><span class='line'>
</span><span class='line'>  <span class="nb">LogFormat</span> <span class="s2">&quot;%h (%{X-Forwarded-For}i) %l %u %t \&quot;%r\&quot; %&gt;s %b \&quot;%{Referer}i\&quot; \&quot;%{User-Agent}i\&quot;&quot;</span>
</span><span class='line'>  <span class="nb">ErrorLog</span> <span class="sx">/var/log/httpd/elasticbeanstalk-error_log</span>
</span><span class='line'>  <span class="nb">TransferLog</span> <span class="sx">/var/log/httpd/elasticbeanstalk-access_log</span>
</span><span class='line'><span class="nt">&lt;/VirtualHost&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>6. Create a .config file in the same directory (i.e. https.config) and add
the command for moving the .conf file to the correct spot:</p>

<figure class='code'><figcaption><span>https.config </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">container_commands</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">01_replace_apache_server</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">cp .ebextensions/elasticbeanstalk.conf /etc/httpd/conf.d/elasticbeanstalk.conf</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>7. Deploy your application with the new config files</p>

<p>8. Restart Apache (or rebuild the environment) to pick up the changes
To restart Apache run: <code>sudo /etc/init.d/httpd restart</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a Self-Signed SSL Certificate for an Amazon ELB]]></title>
    <link href="http://msnider.github.io/blog/2013/12/05/creating-a-self-signed-ssl-certificate-for-an-amazon-elb/"/>
    <updated>2013-12-05T00:06:01-05:00</updated>
    <id>http://msnider.github.io/blog/2013/12/05/creating-a-self-signed-ssl-certificate-for-an-amazon-elb</id>
    <content type="html"><![CDATA[<ol>
<li>Generate a Private Key
 The Private Key is used to decrypt messages sent to the server. Keep this
 safe and secret! Use any password when prompted (we&rsquo;ll remove it later).
 <code>openssl genrsa -des3 -out domain.key 1024</code></li>
<li>Generate a Certificate Signing Request (CSR)
 The CSR contains the Public Key, used to encrypt messages, and information
 about the application so the end user (visitor) can see, so enter the
 information accordingly.
 <code>openssl req -nodes -newkey rsa:2048 -keyout domain.key -out domain.csr</code></li>
<li>Remove the Password from the Private Key
 <code>cp domain.key domain.key.password</code>
 <code>openssl rsa -in domain.key.password -out domain.key</code></li>
<li>Generate the Certificate
 Make sure to set the number of days before expiration, set to 1 year below.
 <code>openssl x509 -req -days 365 -in domain.csr -signkey domain.key -out domain.crt</code></li>
<li>Open the AWS Console to upload your certificate

<ol>
<li>Open the AWS Console</li>
<li>Open the EC2 Dashboard then view &ldquo;Load Balancers&rdquo;</li>
<li>Select any load balancer or create a new one (You don&rsquo;t have to assign it to this ELB)</li>
<li>Click on the Listeners tab of the load balancer</li>
<li>Select HTTPS for a new listener and under SSL Certificate click &ldquo;Select&rdquo;</li>
<li>Choose &ldquo;Upload a new SSL Certificate&rdquo; and give it a name</li>
</ol>
</li>
<li>Copy the Private Key to the &ldquo;Private Key&rdquo; field

<ol>
<li>Output the private key to the command line
 <code>openssl rsa -in domain.key -text</code></li>
<li>Copy everything from the &ldquo;Begin&rdquo; to the &ldquo;End&rdquo; tags (inclusive)</li>
</ol>
</li>
<li>Copy the Certificate to the &ldquo;Public Key Certificate&rdquo; field

<ol>
<li>Output the certificate to the command line
 <code>openssl x509 -inform PEM -in domain.crt</code></li>
<li>Copy everything from the &ldquo;Begin&rdquo; to the &ldquo;End&rdquo; tags (inclusive)</li>
</ol>
</li>
<li>Save the SSL Cert in AWS</li>
<li>Assign this certificate to this or another ELB or within Elastic Beanstalk</li>
</ol>


<h3>References</h3>

<ul>
<li><a href="http://almostalldigital.wordpress.com/2013/03/07/self-signed-ssl-certificate-for-ec2-load-balancer/">http://almostalldigital.wordpress.com/2013/03/07/self-signed-ssl-certificate-for-ec2-load-balancer/</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
